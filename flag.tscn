[gd_scene load_steps=7 format=3 uid="uid://ddikcj3swt4pd"]

[ext_resource type="Texture2D" uid="uid://cma6dqrdle7i0" path="res://Assets/default_flag.bmp" id="1_5r4qr"]

[sub_resource type="PlaneMesh" id="PlaneMesh_nwp1y"]
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id="Shader_wiq6a"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.2.stable's StandardMaterial3D.
// https://www.gdquest.com/tutorial/godot/shaders/flag-shader-3d/
shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D uv_offset_texture : hint_default_black;
uniform vec2 uv_offset_scale = vec2(-0.2, -0.1);
uniform vec2 time_scale = vec2(0.2,0.0);
uniform float face_distortion = 0.5;

void vertex() {
	vec2 base_uv_offset = UV * uv_offset_scale;
	base_uv_offset += TIME * time_scale; // move the flag texture with the time, the time scale is to slow it down
	float noise = texture(uv_offset_texture, base_uv_offset).r;
	float texture_based_offset = noise * 2.0 - 1.0; // convert from [0.0, 1.0] to [-1.0, 1.0]
	texture_based_offset *= UV.x; // only flap in the wind away from the flag pole
	VERTEX.y += texture_based_offset; // apple the noise with the time pased animation
	VERTEX.z += texture_based_offset * face_distortion;
	VERTEX.x += texture_based_offset * -face_distortion;

	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mmgjm"]
noise_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_mtp5n"]
seamless = true
noise = SubResource("FastNoiseLite_mmgjm")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hyfi4"]
render_priority = 0
shader = SubResource("Shader_wiq6a")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_5r4qr")
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/uv_offset_texture = SubResource("NoiseTexture2D_mtp5n")
shader_parameter/uv_offset_scale = Vector2(-0.2, -0.1)
shader_parameter/time_scale = Vector2(0.2, 0)
shader_parameter/face_distortion = 0.5

[node name="Node3D" type="Node3D"]

[node name="Plane" type="MeshInstance3D" parent="." groups=["flag"]]
transform = Transform3D(1.667, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
mesh = SubResource("PlaneMesh_nwp1y")
skeleton = NodePath("")
surface_material_override/0 = SubResource("ShaderMaterial_hyfi4")
